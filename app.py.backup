from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import logging

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
import os
import base64
from dotenv import load_dotenv
import openai
from docx import Document
import fitz  # PyMuPDF for PDF processing
import io

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# Load environment variables
load_dotenv()
openai.api_key = os.getenv('OPENAI_API_KEY')
if not openai.api_key:
    raise RuntimeError("OpenAI API key is missing. Check your .env file.")

# Store transcripts and characters in memory
transcripts = {}
characters = set()

# File processing functions
def process_pdf_content(pdf_content):
    """Process PDF content using PyMuPDF (fitz)"""
    try:
        pdf_bytes = base64.b64decode(pdf_content.split(',')[1] if ',' in pdf_content else pdf_content)
        pdf_file = fitz.open(stream=pdf_bytes, filetype="pdf")
        text = ""
        for page in pdf_file:
            text += page.get_text()
        return text
    except Exception as e:
        raise Exception(f"Error processing PDF: {str(e)}")

def process_docx_content(docx_content):
    """Process DOCX content from base64 string"""
    try:
        docx_bytes = base64.b64decode(docx_content.split(',')[1] if ',' in docx_content else docx_content)
        doc = Document(io.BytesIO(docx_bytes))
        return "\n".join(paragraph.text for paragraph in doc.paragraphs)
    except Exception as e:
        raise Exception(f"Error processing DOCX: {str(e)}")

def process_text_content(content):
    """Process plain text content"""
    try:
        logger.debug(f"Processing text content")
        if isinstance(content, str):
            if content.startswith('data:text/plain;base64,'):
                logger.debug("Decoding base64 text content")
                return base64.b64decode(content.split(',')[1]).decode('utf-8')
            logger.debug("Using plain text content as is")
            return content
        else:
            logger.error(f"Unexpected content type: {type(content)}")
            raise Exception("Invalid content type")
    except Exception as e:
        logger.error(f"Error processing text: {str(e)}")
        raise Exception(f"Error processing text: {str(e)}")

def extract_characters(content):
    """Extract character names from text"""
    potential_chars = set()
    for line in content.split("\n"):
        if ':' in line:
            speaker = line.split(":")[0].strip()
            if len(speaker) > 1 and speaker.isalpha():
                potential_chars.add(speaker.upper())
    return potential_chars

def process_file_content(content, file_type):
    """Process content based on file type"""
    logger.debug(f"Processing file content of type: {file_type}")
    try:
        if file_type == 'pdf':
            logger.debug("Calling process_pdf_content")
            return process_pdf_content(content)
        elif file_type in ['doc', 'docx']:
            logger.debug("Calling process_docx_content")
            return process_docx_content(content)
        elif file_type == 'txt':
            logger.debug("Calling process_text_content")
            return process_text_content(content)
        else:
            raise Exception(f"Unsupported file type: {file_type}")
    except Exception as e:
        logger.error(f"Error in process_file_content: {str(e)}")
        raise

# Define routes
@app.route('/')
def home():
    """Route for root URL"""
    return send_from_directory('.', 'index.html')

@app.route('/upload_transcript', methods=['POST'])
def upload_transcript():
    try:
        logger.debug("Received upload request")
        if not request.is_json:
            logger.error("Request is not JSON")
            return jsonify({'error': 'Request must be JSON'}), 400
            
        data = request.json
        logger.debug(f"Request data keys: {data.keys()}")
        
        transcript_id = data.get('id')
        content = data.get('content')
        file_type = data.get('fileType', 'txt').lower()
        
        logger.debug(f"File type: {file_type}, Transcript ID: {transcript_id}")
        logger.debug(f"Content type: {type(content)}")
        logger.debug(f"Content prefix: {content[:100] if content else 'None'}")  # Log start of content
        
        if not content:
            logger.error("Content is empty")
            return jsonify({'error': 'Content is empty'}), 400

        if not transcript_id or not content:
            return jsonify({'error': 'Missing transcript ID or content'}), 400

        processed_content = process_file_content(content, file_type)
        transcripts[transcript_id] = processed_content
        new_characters = extract_characters(processed_content)
        characters.update(new_characters)

        return jsonify({
            'message': f'Transcript {transcript_id} uploaded successfully',
            'current_transcripts': list(transcripts.keys()),
            'characters': list(characters),
            'char_count': len(processed_content),
            'char_preview': processed_content[:200] + '...' if len(processed_content) > 200 else processed_content
        })
    except Exception as e:
        return jsonify({'error': f'Server error: {str(e)}'}), 500

@app.route('/list_transcripts', methods=['GET'])
def list_transcripts():
    """List all uploaded transcripts"""
    return jsonify({
        'transcripts': list(transcripts.keys()),
        'count': len(transcripts)
    })

@app.route('/clear_transcripts', methods=['POST'])
def clear_transcripts():
    """Clear all transcripts"""
    transcripts.clear()
    characters.clear()
    return jsonify({'message': 'All transcripts cleared'})

# Run the app
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5002, debug=True)
